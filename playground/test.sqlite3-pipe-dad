-- Pipe syntax - top-to-bottom linear data flow.
FROM customer
|> LEFT OUTER JOIN orders ON c_custkey = o_custkey
|> AGGREGATE COUNT(o_orderkey) c_count
   GROUP BY c_custkey
|> AGGREGATE COUNT(*) AS custdist
   GROUP BY c_count
|> ORDER BY custdist DESC, c_count DESC;

-- A standard FROM clause with comma joins, with post-filtering in a WHERE.
FROM Nation, Region
|> WHERE n_regionkey = r_regionkey;

--
-- JOIN works as a pipe operator, using the usual syntax
-- -----------------------------------------------------
--

FROM Nation
|> JOIN Region ON n_regionkey = r_regionkey;

-- Same thing with a LEFT JOIN
FROM Nation
|> LEFT JOIN Region ON n_regionkey = r_regionkey AND r_name LIKE 'A%';

-- SELECT supports all standard syntax SELECT features and modifiers.
FROM Region
|> SELECT *;

FROM Nation
|> SELECT DISTINCT n_regionkey;

FROM Region
|> SELECT r_name, length(r_name) AS name_length;

-- Applying SELECT multiple times.  Each can reference previously selected
-- columns.
FROM Region
|> SELECT r_name
|> SELECT r_name, LOWER(r_name) AS lower_name
|> SELECT lower_name, SUBSTR(r_name, 1, 1) || SUBSTR(lower_name, 2) AS mixed_name;

-- Full-table aggregation
FROM Orders
|> AGGREGATE COUNT(*) AS num_orders, COUNT(DISTINCT o_custkey) AS num_customers;

-- Aggregation with grouping
FROM Orders
|> AGGREGATE COUNT(*) AS num_orders, COUNT(DISTINCT o_custkey) AS num_customers
   GROUP BY o_orderpriority;
