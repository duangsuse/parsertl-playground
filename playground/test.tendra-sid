/*
 * Copyright 2008-2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*
 * SID .sid format grammar.
 */



%types%

	AltP;
	bool;
	EntryP;
	ItemP;
	RuleP;
	NonLocalEntryP;
	StringT;
	TypeTupleT;

%terminals%

	BLT-TYPES;       // %types%
	BLT-TERMINALS;   // %terminals%
	BLT-PRODUCTIONS; // %productions%
	BLT-ENTRY;       // %entry%
	BASIC: () -> (: StringT);
	IDENTIFIER: () -> (: StringT);
	TYPEMARK;        // :
	OPEN-TUPLE;	     // (
	CLOSE-TUPLE;     // )
	ARROW;           // ->
	TERMINATOR;      // ;
	BEGIN-ACTION;    // <
	END-ACTION;      // >
	DEFINE;          // =
	BEGIN-RULE;      // {
	END-RULE;        // }
	ALT-SEP;         // ||
	HANDLER-SEP;     // ##
	EMPTY;           // $
	PRED-RESULT;     // ?
	IGNORE;          // !
	SCOPEMARK;       // ::
	BEGIN-SCOPE;     // [
	END-SCOPE;       // ]
	SEPARATOR;       // ,
	REFERENCE;       // &

	EOF;
	!ERROR;

%productions%

	<init-tuple>: () -> (:TypeTupleT);
	<current-tuple>;
	<tuple-name>: (:TypeTupleT &, :StringT &, :StringT &) -> ();
	<tuple-ref-name>: (:TypeTupleT &, :StringT &, :StringT &) -> ();
	<tuple-type>: (:TypeTupleT &, :StringT &) -> ();
	<tuple-ref-type>: (:TypeTupleT &, :StringT &) -> ();
	<save-tuple>;
	<add-type>: (:StringT &) -> ();
	<i-add-type>: (:StringT &) -> ();
	<terminal>: (:StringT &) -> (:EntryP);
	<i-terminal>: (:StringT &) -> (:EntryP);
	<x-terminal>  : (:EntryP, :TypeTupleT &, :TypeTupleT &) -> ();
	<x-terminals>;
	<x-basic>: (:StringT) -> ();
	<add-name>: (:TypeTupleT &, : StringT &) -> ();
	<add-ref-name>: (:TypeTupleT &, :StringT &) -> ();
	<add-var>: (:TypeTupleT &, :StringT &) -> ();
	<add-pred>: (:TypeTupleT &) -> ();
	<add-void>: (:TypeTupleT &) -> ();
	<action>: (:StringT &) -> (:EntryP);
	<i-action>: (:StringT &) -> (:EntryP);
	<x-action>: (:EntryP, :TypeTupleT &, :TypeTupleT &) -> ();
	<non-local>: (:StringT &, :StringT &) -> (:NonLocalEntryP);
	<non-local-init>: (:NonLocalEntryP, :StringT &) -> ();
	<save-scope>: () -> (:EntryP, :RuleP);
	<restore-scope>: (:EntryP, :RuleP) -> ();
	<prod-action>: (:StringT &) -> ();
	<x-prod-action>: (:TypeTupleT &, :TypeTupleT &) -> ();
	<x-identity>: (:TypeTupleT &, :TypeTupleT &) -> ();
	<x-prod-rule>: (:TypeTupleT &, :TypeTupleT &, :StringT &) -> ();
	<x-prod-rule-or-identity>: (:TypeTupleT &, :StringT &) -> ();
	<save>: () -> (:EntryP, :RuleP, :AltP, :bool, :ItemP);
	<restore>: (:EntryP, :RuleP, : AltP, :bool, :ItemP) -> ();
	<handler>;
	<x-handler>;
	<empty-alt>;
	<non-empty-alt>;
	<x-non-empty-alt>;
	<rule>: (:StringT &) -> ();
	<x-rule>: (:TypeTupleT &, :TypeTupleT &) -> ();
	<prod>: (:TypeTupleT &, :TypeTupleT &) -> ();
	<x-prod>;
	<push-scope>;
	<pop-scope>;
	<use-global>;
	<use-local>;
	<add-entry>: (:StringT &) -> ();
	<init>;

	<unhandled-syntax-error>;

	<expected-typemark>;
	<expected-identifier>;
	<expected-identifier-or-basic>;
	<expected-tuple-defn>;
	<expected-terminal-decn>;
	<expected-separator>;
	<expected-open-tuple>;
	<expected-close-tuple>;
	<expected-arrow>;
	<expected-terminator>;
	<expected-lhs-name>;
	<expected-rhs-name>;
	<expected-begin-action>;
	<expected-end-action>;
	<expected-end-scope>;
	<expected-tuple-or-terminator>;
	<expected-item-rhs>;
	<expected-define>;
	<expected-tuple-or-define-or-terminator>;
	<expected-begin-rule>;
	<expected-end-rule>;
	<expected-item>;
	<expected-alternative>;
	<expected-other-defn>;
	<expected-production-defn>;
	<expected-blt-types>;
	<expected-blt-terminals>;
	<expected-blt-productions>;
	<expected-blt-entry>;
	<expected-eof>;
	<expected-terminator-or-define>;

	<destroy-string>: (:StringT &) -> ();

	<skip-to-end-of-tuple-defn>;
	<skip-to-end-of-terminal-decn>;
	<skip-to-end-of-lhs-name>;
	<skip-to-end-of-rhs-name>;
	<skip-to-end-of-action-decn>;
	<skip-to-end-of-item>;
	<skip-to-end-of-alternative>;
	<skip-to-end-of-other-defn>;
	<skip-to-end-of-production-defn>;
	<skip-to-end-of-entry-list>;
	<skip-recover>;

	<is-blt-entry-or-end-scope-or-eof>: () -> (:bool);
	<is-close-tuple-or-skipped-or-eof>: () -> (:bool);
	<is-terminator>: () -> (:bool);
	<is-not-separator>: () -> (:bool);

	/*
	 * Before calling sid-parse-grammar, the sid_current_stream variable should
	 * have been initialized. The address of an initialized GrammarT should be
	 * passed as the first argument.
	 */

	sid-parse-grammar [
		/*
		 * Function type specifications
		 */

		function-type-defn: () -> (params :TypeTupleT, results :TypeTupleT) [
			tuple-defn: (tuple :TypeTupleT &) -> () = {
				name = IDENTIFIER;
				{
					TYPEMARK;
				##
					<expected-typemark>;
				};

				{
					type = IDENTIFIER;
					{
						REFERENCE;
						<tuple-ref-name>(&tuple, &name, &type);
					||
						<tuple-name>(&tuple, &name, &type);
					};
				##
					<expected-identifier>;
					<destroy-string>(&name);
					<skip-to-end-of-tuple-defn>;
				};
			||
				TYPEMARK;
				{
					type = IDENTIFIER;
					{
						REFERENCE;
						<tuple-ref-type>(&tuple, &type);
					||
						<tuple-type>(&tuple, &type);
					};
				##
					<expected-identifier>;
					<skip-to-end-of-tuple-defn>;
				};
			##
				<expected-tuple-defn>;
				<skip-to-end-of-tuple-defn>;
			};

			tuple-defn-list-1: (tuple :TypeTupleT &) -> () = {
				tuple-defn(&tuple);
				{
					? = <is-close-tuple-or-skipped-or-eof>;
				||
					SEPARATOR;
					tuple-defn-list-1(&tuple);
				##
					<expected-separator>;
					tuple-defn-list-1(&tuple);
				};
			};

			tuple-defn-list: (tuple :TypeTupleT &) -> () = {
				$;
			||
				tuple-defn-list-1(&tuple);
			};

			type-tuple-defn: () -> (tuple :TypeTupleT) = {
				tuple = <init-tuple>;

				{
					OPEN-TUPLE;
				##
					<expected-open-tuple>;
				};

				tuple-defn-list(&tuple);
				<skip-recover>;

				{
					CLOSE-TUPLE;
				##
					<expected-close-tuple>;
				};
			};
		] = {
			TYPEMARK;
			params = type-tuple-defn;
			<save-tuple>;

			{
				ARROW;
			##
				<expected-arrow>;
			};

			results = type-tuple-defn;
		||
			params = <init-tuple>;
			results = <init-tuple>;
		};


		/*
		 * Type declarations
		 */

		type-decl-list [
			type-decl = {
				{
					id = IDENTIFIER;
					<add-type> (&id);
				||
					IGNORE;
					id = IDENTIFIER;
					<i-add-type> (&id);
				##
					<expected-identifier>;
				};

				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			};
		] = {
			$;
		||
			type-decl;
			type-decl-list;
		};


		/*
		 * Terminal declarations
		 */

		identifier-or-basic: () -> (s: StringT) = {
			s = IDENTIFIER;
		||
			s = BASIC;
			<x-basic>(s);
		};

		terminal-decn-list [
			terminal-decn = {
				id = identifier-or-basic;
				entry = <terminal>(&id);
				(params, results) = function-type-defn;
				<x-terminal>(entry, &params, &results);

				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			||
				IGNORE;
				{
					id = identifier-or-basic;
					entry = <i-terminal>(&id);
					(params, results) = function-type-defn;
					<x-terminal>(entry, &params, &results);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-identifier>;
					<skip-to-end-of-terminal-decn>;
				};
			##
				<expected-terminal-decn>;
				<skip-to-end-of-terminal-decn>;
			};
		] = {
			terminal-decn;
			<skip-recover>;
			{
				$;
			||
				terminal-decn-list;
			};
		};


		/*
		 * Production definitions
		 */

		production-defn-list [
			/* LHS tuples */
			lhs-name-tuple: () -> (tuple :TypeTupleT) [
				lhs-name: (tuple :TypeTupleT &) -> () = {
					id = IDENTIFIER;
					<add-name>(&tuple, &id);
				||
					REFERENCE;

					{
						id = IDENTIFIER;
						<add-var>(&tuple, &id);
					##
						<expected-identifier>;
					};
				||
					PRED-RESULT;
					<add-pred>(&tuple);
				||
					IGNORE;
					<add-void>(&tuple);
				##
					<expected-lhs-name>;
					<skip-to-end-of-lhs-name>;
				};

				lhs-name-list-1: (tuple :TypeTupleT &) -> () = {
					lhs-name(&tuple);

					{
						? = <is-close-tuple-or-skipped-or-eof>;
					||
						SEPARATOR;
						lhs-name-list-1(&tuple);
					##
						<expected-separator>;
						lhs-name-list-1(&tuple);
					};
				};

				lhs-name-list: (tuple :TypeTupleT &) -> () = {
					$;
				||
					lhs-name-list-1(&tuple);
				};
			] = {
				<current-tuple>;

				{
					OPEN-TUPLE;
				##
					<expected-open-tuple>;
				};

				tuple = <init-tuple>;
				lhs-name-list(&tuple);
				<skip-recover>;

				{
					CLOSE-TUPLE;
				##
					<expected-close-tuple>;
				};
			};

			/* RHS tuples */
			rhs-name-tuple: () -> (tuple :TypeTupleT) [
				rhs-name: (tuple :TypeTupleT &) -> () = {
					id = IDENTIFIER;
					<add-name>(&tuple, &id);
				||
					REFERENCE;

					{
						id = IDENTIFIER;
						<add-ref-name>(&tuple, &id);
					##
						<expected-identifier>;
						<skip-to-end-of-rhs-name>;
					};
				##
					<expected-rhs-name>;
					<skip-to-end-of-rhs-name>;
				};

				rhs-name-list-1: (tuple :TypeTupleT &) -> () = {
					rhs-name(&tuple);

					{
						? = <is-close-tuple-or-skipped-or-eof>;
					||
						SEPARATOR;
						rhs-name-list-1(&tuple);
					##
						<expected-separator>;
						rhs-name-list-1(&tuple);
					};
				};

				rhs-name-list: (tuple:TypeTupleT&) -> () = {
					$;
				||
					rhs-name-list-1(&tuple);
				};
			] = {
				<current-tuple>;

				{
					OPEN-TUPLE;
				##
					<expected-open-tuple>;
				};

				tuple = <init-tuple>;
				rhs-name-list(&tuple);
				<skip-recover>;
				{
					CLOSE-TUPLE;
				##
					<expected-close-tuple>;
				};
			};


			/*
			 * Action declarations
			 */

			action-decn = {
				{
					BEGIN-ACTION;

					id = IDENTIFIER;
					entry = <action>(&id);
					{
						END-ACTION;
					##
						<expected-end-action>;
					};

					(params, results) = function-type-defn;
					<x-action>(entry, &params, &results);
					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				||
					IGNORE;

					BEGIN-ACTION;

					{
						id = IDENTIFIER;
						entry = <i-action>(&id);
						{
							END-ACTION;
						##
							<expected-end-action>;
						};

						(params, results) = function-type-defn;
						<x-action>(entry, &params, &results);
						{
							TERMINATOR;
						##
							<expected-terminator>;
						};
					##
						<expected-identifier>;
						<skip-to-end-of-action-decn>;
					};
				##
					<expected-identifier>;
					<skip-to-end-of-action-decn>;
				};
			};


			/*
			 * Production definitions
			 */

			production-locals = {
				$;
			||
				BEGIN-SCOPE;
				(entry, rule) = <save-scope>;
				production-defn-list;
				<restore-scope>(entry, rule);

				{
					END-SCOPE;
				##
					<expected-end-scope>;
				};
			};

			production-defn-define-4: (lhs-tuple :TypeTupleT &) -> () = {
				rhs-tuple = rhs-name-tuple;
				<x-prod-action>(&lhs-tuple, &rhs-tuple);

				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			||
				<current-tuple>;
				rhs-tuple = <init-tuple>;
				<x-prod-action>(&lhs-tuple, &rhs-tuple);
				TERMINATOR;
			##
				<expected-tuple-or-terminator>;
				<skip-to-end-of-item>;
			};

			production-defn-define-1: (lhs-tuple :TypeTupleT &) -> () = {
				BEGIN-ACTION;
				{
					id = IDENTIFIER;
					<prod-action>(&id);

					{
						END-ACTION;
					##
						<expected-end-action>;
					};
					production-defn-define-4(&lhs-tuple);
				##
					<expected-identifier>;
					<skip-to-end-of-item>;
				};
			||
				id = identifier-or-basic;

				{
					<current-tuple>;
					<x-prod-rule-or-identity> (&lhs-tuple, &id);
					TERMINATOR;
				||
					rhs-tuple = rhs-name-tuple;
					<x-prod-rule>(&lhs-tuple, &rhs-tuple, &id);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-tuple-or-terminator>;
					<destroy-string>(&id);
					<skip-to-end-of-item>;
				};
			||
				<current-tuple>;
				REFERENCE;
				rhs-tuple = <init-tuple>;
				{
					id = identifier-or-basic;
					<add-ref-name>(&rhs-tuple, &id);
					<x-identity>(&lhs-tuple, &rhs-tuple);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				##
					<expected-identifier-or-basic>;
					<skip-to-end-of-item>;
				};
			||
				rhs-tuple = rhs-name-tuple;
				<x-identity>(&lhs-tuple, &rhs-tuple);
				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			##
				<expected-item-rhs>;
				<skip-to-end-of-item>;
			};

			production-defn-define = {
				lhs-tuple = lhs-name-tuple;
				<save-tuple>;

				{
					DEFINE;
				##
					<expected-define>;
				};

				production-defn-define-1(&lhs-tuple);
			||
				<current-tuple>;
				PRED-RESULT;
				lhs-tuple = <init-tuple>;
				<add-pred>(&lhs-tuple);
				<save-tuple>;

				{
					DEFINE;
				##
					<expected-define>;
				};

				production-defn-define-1(&lhs-tuple);
			||
				<current-tuple>;
				IGNORE;
				lhs-tuple = <init-tuple>;
				<add-void>(&lhs-tuple);
				<save-tuple>;

				{
					DEFINE;
				##
					<expected-define>;
				};

				production-defn-define-1(&lhs-tuple);
			||
				REFERENCE;
				{
					id = IDENTIFIER;
					<current-tuple>;
					lhs-tuple = <init-tuple>;
					<add-var>(&lhs-tuple,&id);
					<save-tuple>;

					{
						DEFINE;
					##
						<expected-define>;
					};

					production-defn-define-1(&lhs-tuple);
				##
					<expected-identifier>;
				};
			||
				id = identifier-or-basic;

				{
					<current-tuple>;
					<save-tuple>;
					lhs-tuple = <init-tuple>;
					rhs-tuple = rhs-name-tuple;
					<x-prod-rule>(&lhs-tuple, &rhs-tuple, &id);

					{
						TERMINATOR;
					##
						<expected-terminator>;
					};
				||
					<current-tuple>;
					lhs-tuple = <init-tuple>;
					<add-name>(&lhs-tuple,&id);
					<save-tuple>;
					DEFINE;
					production-defn-define-1(&lhs-tuple);
				||
					<current-tuple>;
					<save-tuple>;
					<current-tuple>;
					lhs-tuple = <init-tuple>;
					rhs-tuple = <init-tuple>;
					<x-prod-rule>(&lhs-tuple, &rhs-tuple, &id);
					TERMINATOR;
				##
					<expected-tuple-or-define-or-terminator>;
					<destroy-string>(&id);
					<skip-to-end-of-item>;
				};
			||
				<current-tuple>;
				<save-tuple>;
				lhs-tuple = <init-tuple>;
				BEGIN-ACTION;

				{
					id = IDENTIFIER;
					<prod-action>(&id);

					{
						END-ACTION;
					##
						<expected-end-action>;
					};

					production-defn-define-4(&lhs-tuple);
				##
					<expected-identifier>;
					<skip-to-end-of-item>;
				};
			};

			/* TODO: Why here? */
			production-defn-rhs;

			production-defn-item = {
				production-defn-define;
				<skip-recover>;
			||
				BEGIN-RULE;
				(entry, rule, alt, internal, item) = <save>;
				production-defn-rhs;
				<restore>(entry, rule, alt, internal, item);

				{
					END-RULE;
				##
					<expected-end-rule>;
				};

				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			};

			production-defn-non-empty-alternative = {
				production-defn-item;
			||
				production-defn-item;
				production-defn-non-empty-alternative;
			##
				<expected-item>;
				<skip-to-end-of-item>;
				<skip-recover>;
			};

			exception-handler = {
				<handler>;
			production-defn-non-empty-alternative;
				<x-handler>;
			};

			production-defn-alternative = {
				<empty-alt>;
				EMPTY;

				{
					TERMINATOR;
				##
					<expected-terminator>;
				};
			||
				<non-empty-alt>;
				production-defn-non-empty-alternative;
				<x-non-empty-alt>;
			##
				<expected-alternative>;
				<skip-to-end-of-alternative>;
				<skip-recover>;
			};

			production-defn-alternatives = {
				production-defn-alternative;

				{
					$;
				||
					ALT-SEP;
					production-defn-alternatives;
				};
			};

			production-defn-rhs = {
				production-defn-alternatives;

				{
					$;
				||
					HANDLER-SEP;
					exception-handler;
				};
			};

			other-defn = {
				id = IDENTIFIER;

				{
					TYPEMARK;

					{
						type = IDENTIFIER;
						nonlocalentry = <non-local>(&id, &type);

						{
							TERMINATOR;
						||
							DEFINE;
							{
								BEGIN-ACTION;
							##
								<expected-begin-action>;
							};

							{
								action = IDENTIFIER;
								<non-local-init>(nonlocalentry, &action);

								{
									END-ACTION;
								##
									<expected-end-action>;
								};

								{
									TERMINATOR;
								##
									<expected-terminator>;
								};

							##
								<expected-identifier>;
							};

						##
							<expected-terminator-or-define>;
						};

					##
						<expected-identifier>;
						<destroy-string> (&id);
						<skip-to-end-of-other-defn>;
					};

				||
					(params, results) = function-type-defn;
					<rule>(&id);

					{
						<x-rule>(&params, &results);
						TERMINATOR;
					||
						<prod>(&params, &results);
						<push-scope>;
						production-locals;

						{
							DEFINE;
						##
							<expected-define>;
						};

						{
							BEGIN-RULE;
						##
							<expected-begin-rule>;
						};

						production-defn-rhs;

						{
							END-RULE;
						##
							<expected-end-rule>;
						};

						<pop-scope>;
						<x-prod>;
						{
							TERMINATOR;
						##
							<expected-terminator>;
						};
					};

				##
					<expected-other-defn>;
					<destroy-string>(&id);
					<skip-to-end-of-other-defn>;
				};
			};

			production-defn = {
				{
					SCOPEMARK;
					<use-global>;
				||
					<use-local>;
				};

				{
					action-decn;
				||
					other-defn;
				};
			};
		] /* production-defn-list */ = {
			production-defn;
			<skip-recover>;

			{
				? = <is-blt-entry-or-end-scope-or-eof>;
			||
				production-defn-list;
			};
		##
			<expected-production-defn>;
			<skip-to-end-of-production-defn>;
			<skip-recover>;

			{
				? = <is-blt-entry-or-end-scope-or-eof>;
			##
				production-defn-list;
			};
		};


		/*
		 * Entry declarations
		 */

		entry-list [
			entry = {
				id = IDENTIFIER;
				<add-entry>(&id);
			##
				<expected-identifier>;
			};
		] = {
			entry;

			{
				? = <is-terminator>;
			||
				SEPARATOR;
				entry-list;
			##
				<expected-separator>;
				<skip-to-end-of-entry-list>;
				<skip-recover>;

				{
					? = <is-not-separator>;
				##
					entry-list;
				};
			};
		};
	] /* sid-parse-grammar */ = {
		<init>;

		{
			BLT-TYPES;
		##
			<expected-blt-types>;
		};

		type-decl-list;

		{
			BLT-TERMINALS;
		##
			<expected-blt-terminals>;
		};

		terminal-decn-list;
		<x-terminals>;

		{
			BLT-PRODUCTIONS;
		##
			<expected-blt-productions>;
		};

		production-defn-list;

		{
			BLT-ENTRY;
		##
			<expected-blt-entry>;
		};

		entry-list;

		{
			TERMINATOR;
		##
			<expected-terminator>;
		};

		{
			EOF;
		##
			<expected-eof>;
		};
	##
		<unhandled-syntax-error>;
	};

%entry% sid-parse-grammar;
