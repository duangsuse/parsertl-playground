// Test for blocking accept.

// Accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

/////
// Test for blocking accept with syn ack retransmission.

// Accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+3 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.1 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

/////
// Test for early ACK packet on accept.

// Attempt to accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive ACK packet.
+.2 TCP < . seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Send a RST packet.
+.0 TCP > R. seq 1(0) ack 2 <nop>

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

/////
// Test for early PSH packet on accept.

// Attempt to accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive PSH packet.
+.2 TCP < P seq 0(0) win 65535 <mss 1450,wscale 0>
// Send a RST packet.
+.0 TCP > R. seq 0(0) ack 28 <nop>

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

/////
// Tests for successful completion of an accept system call, when a data-carrying, SYN segment is received.

// Accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive a data-carrying SYN segment.
+.2 TCP < S seq 0(1000) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK segment, that does not ack the received data.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK segment.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

/////
// Test for blocking close.

// Establish a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.2 connect(500, ..., ...) = 0

// Send SYN packet.
+.0 TCP > S seq 0(0) win 65535 <mss 1450, wscale 0>
// Receive SYN-ACK packet.
+.1 TCP < S. seq 0(0) ack 1 win 65535 <mss 1450, wscale 0>
// Send ACK on SYN-ACK packet.
+.0 TCP > . seq 1(0) ack 1 win 65535 <nop>

// Succeed to establish connection.
+.0 wait(500, ...) = 0

// Succeed to disconnect.
+.1 close(500) = 0
+.0 TCP > F. seq 1(0) ack 1 win 65535 <nop>
+.1 TCP < . seq 1(0) ack 2 win 65535 <nop>

/////
// Tests for local close.

// Establish a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.2 connect(500, ..., ...) = 0

// Send SYN segment.
+.0 TCP > S seq 0(0) win 65535 <mss 1450, wscale 0>
// Receive SYN-ACK segment.
+.1 TCP < S. seq 0(0) ack 1 win 65535 <mss 1450, wscale 0>
// Send ACK on SYN-ACK segment.
+.0 TCP > . seq 1(0) ack 1 win 65535 <nop>

// Succeed to establish connection.
+.0 wait(500, ...) = 0

// Send data.
+.1 write(500, ..., 1000) = 1000

// Send data packet.
+0 TCP > P. seq 1(1000) ack 1 win 65535 <nop>

// Close connection.
+.2 close(500) = 0

// Send FIN segment.
+.0 TCP > F. seq 1001(0) ack 1 win 65535 <nop>

// Send data packet.
+4 TCP > P. seq 1(1000) ack 1 win 65535 <nop>

// Receive ACK on data packet.
+.1 TCP < . seq 1(0) ack 1001 win 65535 <nop>

// Send FIN again since no ack on it yet.
+.0 TCP > F. seq 1001(0) ack 1 win 65535 <nop>

// Send completes
+.0 wait(500, ...) = 9

// Receive FIN segment.
+.1 TCP < F. seq 1(0) ack 1002 win 65535 <nop>
// Send ACK on FIN segment.
+.0 TCP > . seq 1002(0) ack 2 win 65534 <nop>

// Succeed to close connection after 2 MLS.
+240 wait(500, ...) = 0

/////
// Tests for simultaneous close.

// Establish a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.2 connect(500, ..., ...) = 0

// Send SYN segment.
+.0 TCP > S seq 0(0) win 65535 <mss 1450, wscale 0>
// Receive SYN-ACK segment.
+.1 TCP < S. seq 0(0) ack 1 win 65535 <mss 1450, wscale 0>
// Send ACK on SYN-ACK segment.
+.0 TCP > . seq 1(0) ack 1 win 65535 <nop>

// Succeed to establish connection.
+.0 wait(500, ...) = 0

// Close connection.
+.2 close(500) = 0

// Send FIN segment.
+.0 TCP > F. seq 1(0) ack 1 win 65535 <nop>
// Receive ACK on FIN segment.
+.1 TCP < F. seq 1(0) ack 2 win 65535 <nop>

// Send ACK on FIN segment.
+.0 TCP > . seq 2(0) ack 2 win 65534 <nop>

// Succeed to close connection after 2 MLS.
+240 wait(500, ...) = 0

/////
// Test for blocking connect.

// Establish a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.2 connect(500, ..., ...) = 0

// Send SYN packet.
+.0 TCP > S seq 0(0) win 65535 <mss 1450, wscale 0>
// Receive SYN-ACK packet.
+.1 TCP < S. seq 0(0) ack 1 win 65535 <mss 1450, wscale 0>
// Send ACK on SYN-ACK packet.
+.0 TCP > . seq 1(0) ack 1 win 65535 <nop>

// Succeed to establish connection.
+.0 wait(500, ...) = 0

/////
// Test for blocking pop-push round.

// Accept a connection.
 +.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

// Read data.
+.1 read(501, ..., 1000) = 1000

// Receive data packet.
+.1 TCP < P. seq 1(1000) ack 1 win 65535 <nop>
// Send ACK packet.
+.6 TCP > . seq 1(0) ack 1001 win 65535 <nop>

// Data read.
+.0 wait(501, ...) = 0

// Send data.
+.1 write(501, ..., 1000) = 1000

// Send data packet.
+.1 TCP > P. seq 1(1000) ack 1001 win 65535 <nop>
// Receive ACK on data packet.
+.1 TCP < . seq 1001(0) ack 1001 win 65535 <nop>

// Data sent.
+.0 wait(501, ...) = 0

/////
// Test for blocking push with 2 lost packets and retransmission.

// Accept a connection.
+.0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 500
+.0 bind(500, ..., ...) = 0
+.0 listen(500, 1) = 0
+.2 accept(500, ..., ...) = 0

// Receive SYN packet.
+.2 TCP < S seq 0(0) win 65535 <mss 1450,wscale 0>
// Send SYN-ACK packet.
+.0 TCP > S. seq 0(0) ack 1 win 65535 <mss 1450,wscale 0>
// Receive ACK on SYN-ACK packet.
+.2 TCP < . seq 1(0) ack 1 win 65535 <nop>

// Succeed to accept connection.
+.0 wait(500, ...) = 0

// Send data.
+.1 write(501, ..., 1000) = 1000

// Send data packet.
+0 TCP > P. seq 1(1000) ack 1 win 65535 <nop>


// Send more data.
+.1 write(501, ..., 1000) = 1000

// Send data packet.
+0 TCP > P. seq 1001(1000) ack 1 win 65535 <nop>

// Retransmit first data packet.
+4 TCP > P. seq 1(1000) ack 1 win 65535 <nop>

// Receive ACK on first data packet.
+.1 TCP < . seq 1(0) ack 1001 win 65535 <nop>

// Data sent.
+.0 wait(501, ...) = 0

// Retransmit second data packet.
+.1 TCP > P. seq 1001(1000) ack 1 win 65535 <nop>

// Receive ACK on second data packet.
+.1 TCP < . seq 1(0) ack 2001 win 65535 <nop>

// Data sent.
+.0 wait(501, ...) = 0

/////
// Test for blocking push-pop.

// Accept a connection.
 +.0 socket(..., SOCK_DGRAM, IPPROTO_UDP) = 500
+.0 bind(500, ..., ...) = 0

// Send data.
+.1 sendto(500, ..., 1000) = 1000

// Send data packet.
+.0 UDP > len 1000

// Data sent.
+.0 wait(500, ...) = 0

// Receive data.
+.1 read(500, ..., 1000) = 1000

// Receive data packet.
+.0 UDP < len 1000

// Data received.
+.0 wait(500, ...) = 0
