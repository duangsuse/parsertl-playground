/* comment */

/* event declaration */
event SampleEvent { pos, time };
event InheritanceEvent extends SampleEvent { angle };
event OtherEvent { foo };

predicate pred1(SampleEvent a) := a.pos == [1, 2, 3];
predicate pred2(SampleEvent a) := a.time == [0.12345];

SampleEvent foo(SampleEvent a, SampleEvent b) :=
{
	pos = a.pos + b.pos,
	time = a.time + b.time
};

SampleEvent constfun(SampleEvent a) := foo(foo(a, a), foo(a, a));

Rule: [SampleEvent : pred1, pred2] -> constfun;